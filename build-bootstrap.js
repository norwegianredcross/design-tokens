// build-bootstrap.js

const fs = require('fs');
const path = require('path');
const postcss = require('postcss');

// ==========================================================================
// MAPPING: Connects your Design System tokens to Bootstrap's variables
// Add to this map as you need to theme more Bootstrap components.
// ==========================================================================
const tokenMap = {
  // Maps --ds-color-primary-base-default to $primary, --bs-primary, etc.
  'ds-color-primary-base-default': { sassVar: 'primary', cssVar: 'primary' },
  'ds-color-neutral-base-default': { sassVar: 'secondary', cssVar: 'secondary' },
  'ds-color-success-base-default': { sassVar: 'success', cssVar: 'success' },
  'ds-color-info-base-default':    { sassVar: 'info', cssVar: 'info' },
  'ds-color-danger-base-default':  { sassVar: 'danger', cssVar: 'danger' },
  'ds-color-warning-base-default': { sassVar: 'warning', cssVar: 'warning' },

  'ds-color-neutral-surface-tinted': { sassVar: 'light', cssVar: 'light' },
  'ds-color-neutral-surface-default':  { sassVar: 'dark', cssVar: 'dark' },

  'ds-color-neutral-background-default': { sassVar: 'body-bg', cssVar: 'body-bg' },
  'ds-color-neutral-text-default':       { sassVar: 'body-color', cssVar: 'body-color' },
  'ds-color-neutral-border-default':     { sassVar: 'border-color', cssVar: 'border-color' },
  // Add more mappings here, e.g., for fonts, border-radius, etc.
  'ds-font-family': { sassVar: 'font-family-base' },
  'ds-border-radius-default': { sassVar: 'border-radius' },
};

// --- Main Build Function ---
async function build() {
  const sourceCssPath = path.join('design-tokens-build', 'theme.css');
  const outputScssPath = path.join('design-tokens-build', 'bootstrap-theme.scss');

  if (!fs.existsSync(sourceCssPath)) {
    console.error(`Error: Source file not found at ${sourceCssPath}. Make sure 'npm run build' runs first.`);
    return;
  }

  console.log('Parsing source CSS tokens...');
  const css = fs.readFileSync(sourceCssPath, 'utf8');
  const root = postcss.parse(css);

  const lightTokens = {};
  const darkTokens = {};

  // Extract light and dark theme variables from the source CSS
  root.walkRules(rule => {
    const isDark = rule.selector.includes('[data-color-scheme="dark"]');
    const isLight = !isDark && (rule.selector.includes(':root') || rule.selector.includes('[data-color-scheme="light"]'));

    if (isLight || isDark) {
      rule.walkDecls(decl => {
        if (decl.prop.startsWith('--ds-')) {
          const tokenName = decl.prop.replace('--', '');
          if (isLight) lightTokens[tokenName] = decl.value;
          if (isDark) darkTokens[tokenName] = decl.value;
        }
      });
    }
  });

  console.log('Generating Bootstrap SCSS theme file...');
  
  // --- Generate the SCSS output string ---
  let scssOutput = `// Generated by build-bootstrap.js for NPM package consumption
// This file provides static Sass variables for compilation and dynamic CSS variables for theming.

// ==========================================================================
// Part 1: Define Static Sass Variables for Both Themes
// ==========================================================================

// --- Foundational Colors
$white: #fff;
$black: #000;

// --- Light Theme Static Colors\n`;

  for (const [dsName, value] of Object.entries(lightTokens)) {
    const mapping = tokenMap[dsName];
    if (mapping?.sassVar) {
      scssOutput += `$light-${mapping.sassVar}: ${value};\n`;
    }
  }

  scssOutput += '\n// --- Dark Theme Static Colors\n';
  for (const [dsName, value] of Object.entries(darkTokens)) {
    const mapping = tokenMap[dsName];
    if (mapping?.sassVar) {
      scssOutput += `$dark-${mapping.sassVar}: ${value};\n`;
    }
  }

  scssOutput += `
// ==========================================================================
// Part 2: Map Bootstrap's Sass Variables (Defaulting to Light Theme)
// ==========================================================================\n`;

  const themeColorNames = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark'];
  for (const name of themeColorNames) {
    scssOutput += `$${name}: $light-${name};\n`;
  }
  
  scssOutput += `
$body-bg:       $light-body-bg;
$body-color:    $light-body-color;
$border-color:  $light-border-color;
$border-radius: 0.25rem; // Example static value
$font-family-base: "Source Sans 3", sans-serif; // Example static value

// --- Rebuild the core maps Bootstrap uses for compilation
$theme-colors: (
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
);\n`;

  scssOutput += `
// ==========================================================================
// Part 3: Generate Dynamic CSS Variables for Browser Theming
// ==========================================================================\n`;

  scssOutput += ':root {\n';
  for (const [dsName] of Object.entries(lightTokens)) {
    const mapping = tokenMap[dsName];
    if (mapping?.cssVar) {
      scssOutput += `  --bs-${mapping.cssVar}: #{$light-${mapping.sassVar}};\n`;
    }
  }
  
  scssOutput += `
  &[data-bs-theme="dark"] {\n`;
  for (const [dsName] of Object.entries(darkTokens)) {
    const mapping = tokenMap[dsName];
    if (mapping?.cssVar) {
      scssOutput += `    --bs-${mapping.cssVar}: #{$dark-${mapping.sassVar}};\n`;
    }
  }
  scssOutput += '  }\n}\n';

  fs.writeFileSync(outputScssPath, scssOutput);
  console.log(`âœ… Bootstrap theme file successfully built at ${outputScssPath}`);
}

build();

